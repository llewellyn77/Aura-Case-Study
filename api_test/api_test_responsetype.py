import requests
import json
import datetime
from .api_test_oauth_token import generate_timestamp,generate_oauth_token_api
from dotenv import load_dotenv
import os


def test_response_types(token_ ):
    
    """
    Test the response of a GET request to a specified URL and compare it with an expected JSON response.

    This function sends a GET request to the URL specified in the environment variable 'RESPONSE_TYPES_URL'.
    It includes the 'Authorization' header with a valid access token generated by the 'generate_valid_access_token' function.
    The function then checks if the response status is successful and compares the response JSON with the expected JSON.
    If the response matches the expected JSON, it prints a success message and logs it to a file specified by the environment variable 'PATH_TO_RESP_LOGS'.
    If the response does not match the expected JSON, it prints an error message, logs the expected and actual JSON to the log file, and highlights the differences.
    If there is an error with the GET request, it logs the error message to the log file and prints a message to refer to the response log file.

    Environment Variables:
    - RESPONSE_TYPES_URL: The URL to send the GET request.
    - PATH_TO_RESP_LOGS: The path to the log file for recording the success or error messages, as well as the expected and actual JSON responses.

    Dependencies:
    - requests: A Python library for making HTTP requests.
    - json: A Python library for working with JSON data.
    - dotenv: A Python library for reading environment variables from a file.
    - os: A Python module for interacting with the operating system.

    Returns:
    - None

    Raises:
    - requests.exceptions.RequestException: If there is an error with the GET request.

    """

    load_dotenv('.env')
    url = os.environ['RESPONSE_TYPES_URL']
    
    token = {
        'Authorization': f'Bearer {token_}'
    }
    
    try:
        response = requests.get(url, headers=token)
        response.raise_for_status()

        expected_response = {
            "message": "Successfully fetched responseTypes",
            "responseTypes": [
                {
                    "id": 1,
                    "value": "SECURITY",
                    "description": "Security",
                    "createdAt": "2020-04-07T08:34:27.666Z",
                    "updatedAt": "2020-04-07T08:34:27.666Z",
                    "default": True
                }
            ]
        }

        response_json = response.json()
        #print(type(response_json))
        # Compare the response with the expected JSON
        if response_json == expected_response:
            print("Response matches expected JSON.")
            with open(os.environ['PATH_TO_RESP_LOGS'], 'a') as log_file:
                log_file.write(f"{generate_timestamp()} - (Response_Test) Response matches expected JSON. \n")
        else:
            print("Response does not match expected JSON. Please refer to the log file to see differences.")
            # Log the differences to a file
            with open(os.environ['PATH_TO_RESP_LOGS'], 'a') as log_file:
                log_file.write(f"{generate_timestamp()} - (Response_Test) Expected JSON:\n")
                log_file.write(json.dumps(expected_response, indent=2))
                log_file.write("\n\nActual JSON:\n")
                log_file.write(json.dumps(response_json, indent=2))

    except requests.exceptions.RequestException as e:
        with open(os.environ['PATH_TO_RESP_LOGS'], 'a') as log_file:
            log_file.write(f"{generate_timestamp()} - (Response_Test) Error: {e} \n")
        print(f"Unable to get a response. Please refer to the response log file.")


